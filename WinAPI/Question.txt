※ 차후 진행하게 될 이자기에 대한 주의점 + 방어 멘트 + 면접 요령은 이자기 시즌에 다뤄준다.

# 자기 소개 #

- 패스

# 이력서 검증 #

- 패스

# 자기 소개서 검증 #

- 패스

# 기술 면접 #

===================

01. 입사 동기?
ㄴ 왜 널 뽑아야 되나? 어필해 보시오.

02. 야근 여부와 의지에 대해..?
ㄴ 

03. 외국어 할줄 아는가?
ㄴ 원활한 의사소통은 부족할 수 있어도 업무를 진행하는데 있어서는 전혀 문제가 없습니다.

★
04. 본인의 코딩 스타일은 어떤지? (협업 능력이 있는 파악을 하기 위해)
ㄴ 협업, 고서(책)에 대한 이야기를 좋아한다.
ㄴ 설계 / 그래프 / 주석 사용

05. 그렇다면 다른 사람의 코드를 리딩하는 실력은 어느정도라고 생각하는지...?
ㄴ 겸손하게 얘기한 후 어느정도의 능력치가 있고 어떤 방법으로 코드를 리딩하는지

06. 절차지향과 객체지향의 차이점에 대해서 알고 있는지?
ㄴ 절차지향에 대한 대답을 할때는 C언어를 언급하고 구조적프로그래밍을 언급한다.
ㄴ 객치지향은 오브젝트 언급 (.obj 파일)

07. 할로우 나이트? 혹은 메가맨 같은 플랫포머 게임을 해본적이 있는지?
해본적이 있다면 이와 비슷한 장르의 게임 충돌 처리는 어떻게 하면 효율적인지?
ㄴ 메가맨은 픽셀충돌을 사용하고 이러한 질문이 들어왔을 때는 기반 지식을 좀 더 어필한다. (충돌 처리 지식)

★★★★★
08. C / C++ 를 사용했다고 알고 있는데 사용한 이유는?
ㄴ C# / Java 를 언급하고 Java로 사용할 수 없는 일들을 C / C++ 로 할 수 있다를 언급
ㄴ 네이티브 언어의 중요성을 언급
ㄴ STL / Direct 언급

09. 라이프 사이클에 대해서? (변수, 함수)
ㄴ Allocate -> Release -> Memory Pool
- 생명주기(life cycle) : 변수의 메모리가 확보(allocate)된 시점부터 해제(release)되어 가용 메모리 풀(memory pool)에 반환되는 시점

10. 포인터와 스마트 포인터의 차이 / 장단점 / 언제 사용하는지
ㄴ 

11. 게임 프로그래머가 되고 싶은 이유?
ㄴ 전공 / 게임을 잘해서 / 하고 싶어서 <- 안좋은 대답
ㄴ 어릴 적 게임이 좋았던 경험....

★
12. 그러면 어떠한 노력을 했는지?
ㄴ 언어 / 엔진 얘기 반드시 (자랑 타임)
ㄴ 

13. 그럼 읽고 있는 전공책이 있는지?
ㄴ 모던 C++
ㄴ 용책 해골책 물방울책 노을책 (DirectX)
ㄴ 공룡책 (운영체제)

14. 동료들과 의사 소통에 차이가 있을 때 본인의 대처 방식은?
ㄴ 구체적으로 얘기 (추상적으로 얘기하지 말고)
ㄴ 근거와 경험 / 원인 (마찰이 나로 인한? 상대방으로 인한?)
ㄴ 상대방을 존중하되 근거 / 경험에 따라 대처법을 찾는 방식

15. 객체지향의 5대 설계원칙에 대해 설명해 보시오.
ㄴ SOLID

16. 스텍과 힙의 차이점 및 설명? -> 용량? -> 가상 메모리?
ㄴ 스텍 - 함수 호출 / 지역 변수 / 매개 변수
ㄴ 힙 - 

17. 벨류 타입과 레퍼런스 타입에 대해 설명해 보시오.
ㄴ 단점?
ㄴ int** &number = &pa; <- C++ 17 이후 부터 가능

18. 프로그래밍에 여러 분야 중 본인이 가장 관심있고 해보고 싶은 분야가 있다면?
ㄴ 클라이언트 (그래픽스 -> 그래픽스에 속해있는 하위직군)
ㄴ 서버 (데이터베이스)
ㄴ 최적화 프로그래밍 (언어 / 자료구조 / 알고리즘)


★★★★★★★★ 역질문 ★★★★★★★★

18. 마지막으로 회사에 질문할거 있는지? (최소 3가지 이상)
ㄴ

19. C++ 과 C#의 차이점에 대해 설명해 보시오.
ㄴ 파생 질문 : 각 언어의 배열 선언 방법은
ㄴ int number[];
ㄴ int[] = new []
	{
	}
	number;

20. 구조체와 클래스의 차이
ㄴ C#과 C++ 중 어떤 언어에 대해서 여쭙는지 확인
ㄴ C++의 경우 접근 제어 지시자의 차이 (Struct는 )
ㄴ C#은 ( 값 타입 / 참조 타입 ) / ( 박싱 / 언박싱 )

21. 앱실론이 무엇인가? 왜 사용하는가? 왜 오차가 날 수 있는가?
ㄴ 반올림 오차가 발생하니깐 / 메모리 공간의 부족으로 임의로 처리하기 때문

22. 오버 로딩과 오버 라이딩의 개념 및 차이점
ㄴ 오버로딩 : 함수 중복 정의
ㄴ 오버라이딩 : 함수 재정의
ㄴ 중복 정의와 재정의의 차이

23. 다중 상속에 대한 질문 (C++ / C#  1. 가능한지? 2. 왜 안되는지?)
ㄴ C++은 가능은 함 / 근데 좋지 않다.
ㄴ 왜? 다이아몬드 구조 -> 소멸자 호출이 애매
ㄴ 고유 객체성이 깨진다.

24. virtual 키워드 동작 방식
ㄴ 가상 테이블

25. virtual 멤버 함수에 대해서
ㄴ 

26. 가상함수 Table에 대한 설명
ㄴ 함수 포인터가 나열된 테이블

27. new / malloc 개념과 차이점? 그리고 Table과 연관관계는?
ㄴ new는 생성자를 호출

28. 순수 가상함수를 만들면 메모리상에 몇 바이트 차지하는가?
ㄴ 0바이트
ㄴ 상속받은 클래스에서 재정의를 해야 메모리가 쌓인다.

// 스타트 + 중소 = 연봉 + @ / 중견 + 대기업 = 기본
29. 가상함수 테이블을 만들때 메모리상에서 일어나는 과정을 설명해 보시오.
ㄴ 결합 / 바인딩 (정적 바인딩 / 동적 바인딩)

